# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1y0dn2t5x7XxSPsR4WHbH6mdjz7NMp1St
"""

# app.py
import streamlit as st
import torch
import torch.nn as nn
import torchvision.transforms as transforms
import torchvision.models as models
from PIL import Image
import torch.nn.functional as F
from torchvision import models
from huggingface_hub import hf_hub_download

# ---------------------------
# Page Config
# ---------------------------
st.set_page_config(
    page_title="Cat vs Dog Classifier üê±üê∂",
    page_icon="üêæ",
    layout="centered"
)

# ---------------------------
# Custom CSS
# ---------------------------
st.markdown(
    """
    <style>
    .stApp {
        background: linear-gradient(to right, #e0f7fa, #fff3e0);
    }
    .title {
        text-align: center;
        font-size: 2.5em;
        font-weight: bold;
        color: #2c3e50;
        margin-bottom: 20px;
    }
    .prediction {
        text-align: center;
        font-size: 1.8em;
        font-weight: bold;
        color: #1abc9c;
        margin-top: 20px;
    }
    .confidence {
        text-align: center;
        font-size: 1.2em;
        color: #34495e;
        margin-top: 5px;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ---------------------------
# Load model (state_dict method)
# ---------------------------
@st.cache_resource
def load_model():
  # Download from Hugging Face Hub
  model_path = hf_hub_download(
      repo_id="Kingsley-Njoku/Cat-vs-Dog-Classifier",
      filename="cats_dogs_model_state.pth"
  )

  # Define model architecture
  model = models.resnet18(pretrained=False)
  model.fc = torch.nn.Linear(model.fc.in_features, 2)

  # Load trained weights
  state_dict = torch.load(model_path, map_location="cpu")
  model.load_state_dict(state_dict)
  model.eval()
  return model

model = load_model()

# ---------------------------
# Preprocessing
# ---------------------------
transform = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor()
])

# ---------------------------
# UI
# ---------------------------
st.markdown("<div class='title'>üêæ Cat vs Dog Classifier üêæ</div>", unsafe_allow_html=True)

uploaded_file = st.file_uploader("Upload an image of a cat or dog üñºÔ∏è", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="üì∑ Uploaded Image", use_column_width=True)

    # Preprocess
    img_tensor = transform(image).unsqueeze(0)

    # Prediction
    with torch.no_grad():
        output = model(img_tensor)
        probs = F.softmax(output, dim=1)
        pred_idx = torch.argmax(probs, dim=1).item()

    # Class mapping
    classes = ["Cat", "Dog"]
    prediction = classes[pred_idx]
    confidence = probs[0][pred_idx].item() * 100

    st.markdown(f"<div class='prediction'>Prediction: {prediction}</div>", unsafe_allow_html=True)
    st.markdown(f"<div class='confidence'>Confidence: {confidence:.2f}%</div>", unsafe_allow_html=True)

else:
    st.info("üëÜ Upload an image to get started!")